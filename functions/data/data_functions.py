# -*- coding: utf-8 -*-
#!/usr/bin/env python


from pycompss.functions.data import chunks
from pycompss.api.task          import task
from pycompss.api.parameter     import *
from pycompss.functions.reduce import mergeReduce

import numpy as np
import math
import pickle
import pandas as pd

#@task(returns=list)
def Partitionize(data,numFrag):
    """
        Partitionize:

        Method to split the data in numFrags parts. This method simplifies
        the use of chunks.

        :param data: The np.array or list to do the split.
        :param numFrags: A number of partitions
        :return The array splitted.
    """

    PartitionSize = int(math.ceil(float(len(data))/numFrag))
    Ds = [d for d in chunks(data, PartitionSize )]
    partitions = [pd.DataFrame() for _ in range(numFrag)]
    for d in range(len(Ds)):
        partitions[d] = Ds[d]

    return partitions





def FeatureAssemble(df, cols, name):
    """
    Feature Assembler is a transformer that combines a given list of columns
    into a single vector column. It is useful for combining raw features and
    features generated by different feature transformers into a single feature
    vector, in order to train ML models.

    Feature Assembler accepts the following input column types: all numeric
    types, boolean type, and vector type. In each row, the values of the
    input columns will be concatenated into a vector in the specified order.

    :param df: Input DataFrame
    :param cols:  List of columns's name to be assembled
    :param name: Name of the new column

    """
    for i in range(len(df)):
        df[i] = FeatureAssemble_parallel(df[i],cols,name)
    return df

@task(returns=list)
def FeatureAssemble_parallel(df,cols,name):
    df[name] =  df[cols].values.tolist()
    return df
