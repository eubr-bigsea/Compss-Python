# -*- coding: utf-8 -*-
#!/usr/bin/env python


from pycompss.functions.data import chunks
from pycompss.api.task          import task
from pycompss.api.parameter     import *
from pycompss.functions.reduce import mergeReduce

import numpy as np
import math
import pickle
import pandas as pd

#@task(returns=list)
def Partitionize(data,numFrag):
    """
        Partitionize:

        Method to split the data in numFrags parts. This method simplifies
        the use of chunks.

        :param data: The np.array or list to do the split.
        :param numFrags: A number of partitions
        :return The array splitted.
    """

    PartitionSize = int(math.ceil(float(len(data))/numFrag))
    Ds = [d for d in chunks(data, PartitionSize )]
    partitions = [pd.DataFrame() for _ in range(numFrag)]
    for d in range(len(Ds)):
        partitions[d] = Ds[d]

    return partitions




#------------------------------------------------------------------------------
# Save Methods



@task(filename = FILE_OUT)
def SaveToFile(filename,data,mode,header):
    """
        SaveToFile (CSV):

        Method used to save an array into a file.

        :param filename: The name used in the output.
        :param data: The np.array which you want to save.
        :param mode: append, overwrite, ignore or error

    """
    import os.path


    if mode is 'append':
        mode = 'a'
    elif mode is 'ignore':
        if os.path.exists(filename):
            return None
    elif mode is 'error':
        if os.path.exists(filename):
            return None    # !   TO DO: RAISE SOME ERROR
    else:
        mode = 'w'

    print data
    if len(data)==0:
        data = pd.DataFrame()
    if header:
        data.to_csv(filename,sep=',',mode=mode, header=True,index=False)
    else:
        data.to_csv(filename,sep=',',mode=mode, header=False,index=False)

    return None


def SaveToPickle(outfile,data):
    """
        Save an array to a serizable Pickle file format

        :param outfile: the /path/file.npy
        :param data: the data to save
    """
    with open(outfile, 'wb') as handle:
        pickle.dump(data, handle, protocol=pickle.HIGHEST_PROTOCOL)

def SaveToNumpy(outfile,data):
    """
        Save an array to a binary file in NumPy .npy format

        :param outfile: the /path/file.npy
    """
    np.save(outfile, data)
    return None




def FeatureAssemble(df, cols, name):
    """
    Feature Assembler is a transformer that combines a given list of columns
    into a single vector column. It is useful for combining raw features and
    features generated by different feature transformers into a single feature
    vector, in order to train ML models.

    Feature Assembler accepts the following input column types: all numeric
    types, boolean type, and vector type. In each row, the values of the
    input columns will be concatenated into a vector in the specified order.

    :param df: Input DataFrame
    :param cols:  List of columns's name to be assembled
    :param name: Name of the new column

    """
    for i in range(len(df)):
        df[i] = FeatureAssemble_parallel(df[i],cols,name)
    return df

@task(returns=list)
def FeatureAssemble_parallel(df,cols,name):
    df[name] =  df[cols].values.tolist()
    return df
