#!/usr/bin/python
# -*- coding: utf-8 -*-
"""Feature Assembler.

Feature Assembler is a transformer that combines a given list of columns
into a single vector column. It is useful for combining raw features and
features generated by different feature transformers into a single feature
vector, in order to train ML models.

Feature Assembler accepts the following input column types: all numeric
types, boolean type, and vector type. In each row, the values of the
input columns will be concatenated into a vector in the specified order.
"""
__author__ = "Lucas Miguel S Ponce"
__email__ = "lucasmsp@gmail.com"

from pycompss.api.task import task
from pycompss.api.parameter import *
import numpy as np


def FeatureAssemblerOperation(df, cols, alias, numFrag):
    """FeatureAssemblerOperation.

    :param df: Input DataFrame;
    :param cols:  List of valid columns to be assembled;
    :param alias: Name of the new column.
    :return A new DataFrame with the feature.
    """
    if len(cols) == 0 or alias == '':
        raise Exception("You must inform a valid subset of fields and "
                        "a valid alias for the new column name.")

    result = [[] for i in range(numFrag)]
    for i in range(numFrag):
        result[i] = FeatureAssemble_parallel(df[i], cols, alias)
    return result


@task(returns=list)
def FeatureAssemble_parallel(df, cols, name):
    """Perform a partial feature assembler."""
    cols = [col for col in cols if col in df.columns]
    if len(cols) == 0:
        raise Exception("These columns dont belong to this dataset.")

    if len(df) == 0:
        df[name] = np.nan
        return df

    rows = df[cols].iloc[0].values.tolist()
    is_list, not_list = checkfields(rows, cols)

    if len(is_list) == 0:
        df[name] = df[cols].values.tolist()
    else:
        tmp1 = df[not_list].values
        tmp2 = np.array(df[is_list].sum(axis=1).values.tolist())

        df[name] = np.concatenate((tmp1, tmp2), axis=1).tolist()

    return df


def checkfields(rows, cols):
    """Check which fields are a list or a primitive type."""
    is_list = []
    not_list = []
    if len(rows) > 0:
        for item, col_name in zip(rows, cols):
            if isinstance(item, list):
                is_list.append(col_name)
            else:
                not_list.append(col_name)
    return is_list, not_list
