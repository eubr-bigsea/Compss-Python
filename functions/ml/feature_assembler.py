#!/usr/bin/python
# -*- coding: utf-8 -*-

__author__ = "Lucas Miguel S Ponce"
__email__ = "lucasmsp@gmail.com"

from pycompss.api.task import task
import numpy as np


class FeatureAssemblerOperation(object):
    """Feature Assembler.

    Feature Assembler is a transformer that combines a given list of columns
    into a single vector column. It is useful for combining raw features and
    features generated by different feature transformers into a single feature
    vector, in order to train ML models.

    Feature Assembler accepts the following input column types: all numeric
    types, boolean type, and vector type. In each row, the values of the
    input columns will be concatenated into a vector in the specified order.
    """
    def transform(self, data, settings, nfrag):
        settings = self.preprocessing(settings)
        result = [[] for _ in range(nfrag)]
        for f in range(nfrag):
            result[f] = _feature_assemble(data[f], settings)
        return result

    def preprocessing(self, settings):
        if len(settings['cols']) == 0 or settings['alias'] == '':
            raise Exception("You must inform a valid subset of fields and "
                            "a valid alias for the new column name.")
        return settings

    def transform_serial(self, df, settings):
        return _feature_assemble_(df, settings)


@task(returns=list)
def _feature_assemble(df, settings):
    return _feature_assemble_(df, settings)


def _feature_assemble_(df, settings):
    """Perform a partial feature assembler."""
    cols = settings['cols']
    name = settings['alias']

    cols = [col for col in cols if col in df.columns]
    if len(cols) == 0:
        raise Exception("These columns dont belong to this dataset.")

    if len(df) == 0:
        df[name] = np.nan
        return df

    # get the first row to see the type format of each column
    rows = df[cols].iloc[0].values.tolist()
    is_list, not_list = checkfields(rows, cols)

    if len(is_list) == 0:
        df[name] = df[cols].values.tolist()
    else:
        tmp1 = df[not_list].values
        tmp2 = np.array(df[is_list].sum(axis=1).values.tolist())

        df[name] = np.concatenate((tmp1, tmp2), axis=1).tolist()

    return df


def checkfields(rows, cols):
    """Check which fields are a list or a primitive type."""
    is_list = []
    not_list = []
    if len(rows) > 0:
        for item, col_name in zip(rows, cols):
            if isinstance(item, list):
                is_list.append(col_name)
            else:
                not_list.append(col_name)
    return is_list, not_list
